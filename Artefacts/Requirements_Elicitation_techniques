# üè† Rental_AI

A smart rental application designed to simplify the process of finding and managing flat rentals.  
This project applies various **Requirements Elicitation Techniques** to identify and refine the key features of the system.

---

## üìå Requirements Elicitation Techniques

### 1. Observation
By studying existing rental apps and real-world rental processes, we observed the following gaps and requirements:
- Current apps do not provide an option to **find roommates** within the same platform.  
- The system should support **detailed flat listings** (rent, deposit, maintenance, facilities).  
- Customers need a **flat comparison feature** to make better decisions.  
- **Landlord verification** and **secure payment options** must be implemented to build trust.  
- A **map-based search** should be available to give users a better understanding of the surrounding area.  

---

### 2. Brainstorming
The first step in our process involves documenting all the ideas generated by the team without evaluating or filtering them at this stage. This ensures that every perspective is captured and considered. Once all ideas have been listed, we proceed to categorize them into functional requirements‚Äîthose that directly describe what the product should do‚Äîand non-functional requirements‚Äîthose that specify the quality attributes, performance standards, or constraints under which the system must operate.
After classification, each idea is carefully analyzed and discussed. This stage allows the team to identify strengths, limitations, dependencies, and any potential challenges associated with implementing the ideas. Based on these discussions and evaluations, we then prioritize and select the ideas that best align with the product‚Äôs goals and user needs. This structured approach helps ensure that the final product requirements are both comprehensive and practical.

---

### 3. Prototyping
As an initial step in the development process, we will design and implement a basic version of the application. This prototype will primarily focus on establishing a secure and functional login system, along with a set of essential features that form the foundation of the app. The purpose of this stage is to validate the core functionality, ensure smooth integration between the front-end (developed using React) and the back-end (implemented with Node.js), and verify that the overall system operates as expected. 
